
module(name = "example-elm", version = "0.1")


bazel_dep(name = "rules_proto", version = "4.0.0")

bazel_dep(name = "rules_haskell", version = "0.17")
bazel_dep(name = "bazel_skylib", version = "1.4.2")
bazel_dep(name = "rules_cc", version = "0.0.9")
bazel_dep(name = "rules_sh", version = "0.3.0")

bazel_dep(name = "aspect_rules_js", version = "1.31.0")
bazel_dep(name = "rules_nodejs", version = "5.8.3")

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain() # use default node version

use_repo(node, "nodejs")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

npm.npm_translate_lock(
    name = "npm",
    data = ["//:package.json"],
    npm_package_lock = "//:package-lock.json",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
)

use_repo(npm, "npm")

# -- Haskell dependencies --------------------------------------------

haskell_toolchains = use_extension(
    "@rules_haskell//extensions:haskell_toolchains.bzl",
    "haskell_toolchains",
)

haskell_toolchains.bindists(version = "9.6.3")

non_module_deps = use_extension(
    "//:non-module-deps.bzl",
    "deps",
)

stack = use_extension(
    "@rules_haskell//extensions:stack_snapshot.bzl",
    "stack_snapshot",
)

stack.package(
    name = "hspec-discover",
    components = [
        "exe",
        "lib",
    ],
)

stack.package(   
    name = "attoparsec",
    components = [
        "lib",
        "lib:attoparsec-internal",
    ],
    components_dependencies = { 
        "lib:attoparsec": ["lib:attoparsec-internal"],
    },
)

stack.package(
    name = "ghcid",
    components = [
        "exe",
        "lib",
    ],
)

[stack.package(name = pkg) for pkg in [
    "aeson",
    "base",
    "containers",
    "elm-bridge",
    "hspec",
    "http-client",
    "http-types",
    "servant",
    "servant-client",
    "servant-elm",
    "servant-server",
    "text",
    "transformers",
    "wai",
    "wai-app-static",
    "warp",
]]

use_repo(
    stack,
    "stackage",
    "stackage-exe",
    "stackage-unpinned",
)

stack.snapshot(name = "nightly-2023-10-26")

stack.stack_snapshot_json(label = "//:stackage_snapshot.json")
